FROM nvidia/cuda:11.6.2-base-ubuntu20.04

ENV DEBIAN_FRONTEND=noninteractive

RUN \
  apt update && \
  apt install locales -y && \
  locale-gen en_US.UTF-8 && \
  apt install curl git powerline fonts-powerline zsh -y && \
  curl -fsSL https://code-server.dev/install.sh | sh && \
  git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh && \
  cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc && \
  chsh -s /bin/zsh && \
  apt install python3-pip make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl -y && \
  pip install virtualenvwrapper && \
  curl https://pyenv.run | bash && \
  echo 'export PATH="$HOME/.pyenv/bin:$PATH"' >> ~/.zshrc && \
  echo 'export PATH="$HOME/.pyenv/shims:$PATH"' >> ~/.zshrc && \
  echo 'eval "$(pyenv init -)"' >> ~/.zshrc && \
  echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.zshrc && \
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | zsh && \
  echo 'export NVM_DIR="$HOME/.nvm"' >> ~/.zshrc && \
  echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> ~/.zshrc && \
  echo '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"' >> ~/.zshrc && \
  exec zsh
RUN \
  export PATH="$HOME/.pyenv/bin:$PATH" && \
  export PATH="$HOME/.pyenv/shims:$PATH" && \
  eval "$(pyenv init -)" && \
  eval "$(pyenv virtualenv-init -)" && \
  export NVM_DIR="$HOME/.nvm" && \
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && \
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" && \
  nvm install 16.12 && \
  pyenv install 3.8.10 && \
  pyenv global 3.8.10 && \
  npm install --global yarn && \
  apt install dirmngr gnupg apt-transport-https ca-certificates software-properties-common vim -y && \
  apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 && \
  add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/' && \
  apt update && \
  apt install r-base -y

COPY ./custom_certificates /usr/local/share/ca-certificates/

RUN update-ca-certificates

COPY ./config.yaml /root/.config/code-server/config.yaml

ADD start.sh /

RUN chmod +x /start.sh

EXPOSE 8080

CMD ["/start.sh"]
